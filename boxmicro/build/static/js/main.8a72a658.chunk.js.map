{"version":3,"sources":["Components/mapPage.js","Keys/keys.js","Components/getLocation.js","App.js","serviceWorker.js","index.js"],"names":["DrawingMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","markerProps","isLegal","initMap","bind","assertThisInitialized","markers","toMapData","console","log","toBeMappedFromServer","mapProps","map","_this2","google","drawingManager","maps","drawing","DrawingManager","drawingMode","drawingControl","drawingControlOptions","position","ControlPosition","TOP_CENTER","drawingModes","OverlayType","POLYGON","markerOptions","icon","polygonOptions","fillColor","input","document","getElementById","searchBox","places","SearchBox","addListener","getPlaces","length","forEach","marker","setMap","bounds","LatLngBounds","place","geometry","url","size","Size","origin","Point","anchor","scaledSize","push","Marker","title","name","location","viewport","union","extend","fitBounds","polygonArray","myMarkers","polygon","event","coordinates","getPath","getArray","setTimeout","info","points","dimensionsString","coord","index","lat","lng","distance","distanceInKmBetweenEarthCoordinates","toFixed","sendPolygonToServer","legal","checked","sqFeet","spherical","computeArea","value","state","infowindow","InfoWindow","content","open","Map","close","fillOpacity","addEventListener","degreesToRadians","degrees","Math","PI","lat1","lon1","lat2","lon2","dLat","dLon","a","sin","cos","atan2","sqrt","cleanedCoordinates","pgn","myArray","coords","point","plygon","pop","Polygon","path","geodesic","strokeColor","strokeOpacity","strokeWeight","react_default","createElement","type","id","placeholder","defaultChecked","style","color","fontSize","border","dist","width","height","marginLeft","window","onReady","onClick","onMapClicked","data","initialCenter","zoom","scaleControl","eMapApiInternals","React","Component","GoogleApiWrapper","apiKey","libraries","Location","isGeolocationAvailable","isGeolocationEnabled","latitude","longitude","altitude","heading","speed","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","App","_ref","asyncToGenerator","regenerator_default","mark","_callee","servresp","wrap","_context","prev","next","fetch","method","headers","Content-Type","body","JSON","stringify","sent","stop","_x","apply","arguments","then","response","json","data1","setState","className","getLocation","mapPage","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a72a658.chunk.js","sourcesContent":["import React from \"react\";\nimport GOOGLE_API_KEY from \"../Keys/keys\";\nimport {\n\tMap,\n\tInfoWindow,\n\tGoogleApiWrapper,\n\tPolygon,\n\tMarker,\n\tPlaces,\n\tSearchBox\n} from \"google-maps-react\";\n\nclass DrawingMap extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.markerProps = {};\n\t\tthis.isLegal = true;\n\n\t\tthis.initMap = this.initMap.bind(this);\n\t\tthis.markers = [];\n\t\tthis.toMapData = this.props.toMapData;\n\t\tconsole.log(\"I came from the server\", this.props.toBeMappedFromServer);\n\t}\n\n\tinitMap(mapProps, map) {\n\t\tconsole.log(\"cooooooords\", this.props.toBeMappedFromServer);\n\t\tconst { google } = mapProps;\n\n\t\tconst drawingManager = new google.maps.drawing.DrawingManager({\n\t\t\tdrawingMode: null,\n\t\t\tdrawingControl: true,\n\t\t\tdrawingControlOptions: {\n\t\t\t\tposition: google.maps.ControlPosition.TOP_CENTER,\n\t\t\t\tdrawingModes: [\n\t\t\t\t\t// google.maps.drawing.OverlayType.MARKER,\n\t\t\t\t\tgoogle.maps.drawing.OverlayType.POLYGON\n\t\t\t\t]\n\t\t\t},\n\t\t\tmarkerOptions: {\n\t\t\t\ticon:\n\t\t\t\t\t\"https://developers.google.com/maps/documentation/javascript/examples/full/images/parking.png\"\n\t\t\t},\n\t\t\tpolygonOptions: {\n\t\t\t\tfillColor: \"#00FF0\",\n\t\t\t\ticon:\n\t\t\t\t\t\"https://developers.google.com/maps/documentation/javascript/examples/full/images/parking.png\"\n\t\t\t},\n\t\t\tmap: map\n\t\t});\n\t\t// drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n\n\t\t//search bar\n\t\t// Create the search box and link it to the UI element.\n\t\tvar input = document.getElementById(\"searchWindow\");\n\t\tlet searchBox = new google.maps.places.SearchBox(input);\n\t\t// map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);\n\n\t\t// Listen for the event fired when the user selects a prediction and retrieve\n\t\t// more details for that place.\n\n\t\tvar markers = [];\n\t\tsearchBox.addListener(\"places_changed\", function() {\n\t\t\tvar places = searchBox.getPlaces();\n\n\t\t\tif (places.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Clear out the old markers.\n\t\t\tmarkers.forEach(function(marker) {\n\t\t\t\tmarker.setMap(null);\n\t\t\t});\n\n\t\t\tmarkers = [];\n\t\t\t// For each place, get the icon, name and location.\n\t\t\tvar bounds = new google.maps.LatLngBounds();\n\t\t\tconsole.log(\"bounds\", bounds);\n\t\t\tplaces.forEach(function(place) {\n\t\t\t\tif (!place.geometry) {\n\t\t\t\t\tconsole.log(\"Returned place contains no geometry\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar icon = {\n\t\t\t\t\turl: place.icon,\n\t\t\t\t\tsize: new google.maps.Size(71, 71),\n\t\t\t\t\torigin: new google.maps.Point(0, 0),\n\t\t\t\t\tanchor: new google.maps.Point(17, 34),\n\t\t\t\t\tscaledSize: new google.maps.Size(25, 25)\n\t\t\t\t};\n\n\t\t\t\t// Create a marker for each place.\n\t\t\t\tmarkers.push(\n\t\t\t\t\tnew google.maps.Marker({\n\t\t\t\t\t\tmap: map,\n\t\t\t\t\t\ticon: icon,\n\t\t\t\t\t\ttitle: place.name,\n\t\t\t\t\t\tposition: place.geometry.location\n\t\t\t\t\t})\n\t\t\t\t);\n\n\t\t\t\tif (place.geometry.viewport) {\n\t\t\t\t\t// Only geocodes have viewport.\n\t\t\t\t\tbounds.union(place.geometry.viewport);\n\t\t\t\t} else {\n\t\t\t\t\tbounds.extend(place.geometry.location);\n\t\t\t\t}\n\t\t\t\t// bounds.extend(place.geometry.location);\n\t\t\t});\n\t\t\tmap.fitBounds(bounds);\n\t\t});\n\n\t\t//polygon testing\n\t\tlet polygonArray = [];\n\t\tlet myMarkers = [];\n\t\tdrawingManager.addListener(\"polygoncomplete\", polygon => {\n\t\t\t//add a listener to the polygon so we can do things to it.\n\t\t\t//\n\t\t\tgoogle.maps.event.addListener(polygon, \"click\", function(event) {\n\t\t\t\tconsole.log(polygon);\n\t\t\t\t//remove polygon on click\n\t\t\t\tpolygon.setMap(map);\n\t\t\t});\n\n\t\t\tvar coordinates = polygon.getPath().getArray();\n\t\t\tconsole.log(\"coordinates\", coordinates);\n\t\t\tpolygonArray.push(polygon);\n\t\t\tif (polygonArray.length > 1) {\n\t\t\t\tconsole.log(\"changing previous polygon color\");\n\t\t\t\t// polygonArray[polygonArray.length - 2].fillColor = \"#ff00ff\";\n\t\t\t\t// polygonArray[polygonArray.length - 2].setMap(null);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tpolygonArray[polygonArray.length - 2].setMap(map);\n\t\t\t\t}, 10);\n\t\t\t}\n\t\t\tconsole.log(\"the polygon array includes: \", polygonArray);\n\n\t\t\t// console.log(coordinates);\n\n\t\t\tconsole.info(\"The coordinates that make up the polygon are\");\n\t\t\t//log each set up lat long for the polygon\n\t\t\tlet points = [];\n\t\t\tvar dimensionsString = \"<br>DIMENSIONS: <br>\";\n\t\t\tif (coordinates.length > 1) {\n\t\t\t\tcoordinates.forEach(function(coord, index) {\n\t\t\t\t\tconsole.log(coord.lat(), coord.lng(), index);\n\t\t\t\t\tpoints.push([coordinates[index].lat(), coordinates[index].lng()]);\n\t\t\t\t\tif (index < coordinates.length - 1) {\n\t\t\t\t\t\tlet distance = distanceInKmBetweenEarthCoordinates(\n\t\t\t\t\t\t\tcoordinates[index].lat(),\n\t\t\t\t\t\t\tcoordinates[index].lng(),\n\t\t\t\t\t\t\tcoordinates[index + 1].lat(),\n\t\t\t\t\t\t\tcoordinates[index + 1].lng()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdimensionsString =\n\t\t\t\t\t\t\tdimensionsString +\n\t\t\t\t\t\t\t(distance * 1000 * 3.2808).toFixed(2) +\n\t\t\t\t\t\t\t\" feet  <br> by \";\n\t\t\t\t\t\tconsole.log(distance.toFixed(4), \"km in length\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlet distance = distanceInKmBetweenEarthCoordinates(\n\t\t\t\t\t\t\tcoordinates[index].lat(),\n\t\t\t\t\t\t\tcoordinates[index].lng(),\n\t\t\t\t\t\t\tcoordinates[0].lat(),\n\t\t\t\t\t\t\tcoordinates[0].lng()\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdimensionsString =\n\t\t\t\t\t\t\tdimensionsString +\n\t\t\t\t\t\t\t(distance * 1000 * 3.2808).toFixed(2) +\n\t\t\t\t\t\t\t\" feet\";\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// console.log(\"legal.checked?\", legal.checked);\n\n\t\t\t\tthis.props.sendPolygonToServer({\n\t\t\t\t\tpoints: points,\n\t\t\t\t\tlegal: legal.checked\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconsole.log(\"dimensionsString \", dimensionsString);\n\n\t\t\t//grab and attach value in square feet to the input box with id sqfeet\n\t\t\tvar sqFeet =\n\t\t\t\tgoogle.maps.geometry.spherical.computeArea(polygon.getPath()) * 10.7639;\n\t\t\tdocument.getElementById(\"sqfeet\").value =\n\t\t\t\tsqFeet.toFixed(3) + \" Square Feet\";\n\t\t\t//log area in square meters\n\t\t\tconsole.log(\n\t\t\t\t\"Its area in square meters\",\n\t\t\t\tgoogle.maps.geometry.spherical.computeArea(polygon.getPath())\n\t\t\t);\n\t\t\tconsole.log(sqFeet, \" is the square feet.\");\n\n\t\t\tvar marker = new google.maps.Marker({\n\t\t\t\tposition: coordinates[0],\n\t\t\t\tmap: map,\n\t\t\t\ttitle: \"Dimensions\"\n\t\t\t});\n\t\t\tconsole.log(\"before markers\", this.state);\n\t\t\tmyMarkers.push(marker);\n\t\t\tmarker.setMap(map);\n\t\t\tconsole.log(this.props.toBeMappedFromServer);\n\t\t\tsetTimeout(function() {\n\t\t\t\tmarker.setMap(null);\n\t\t\t}, 2000);\n\n\t\t\t//create a marker at the point of the first coordinate of each polygon created.\n\t\t\t// google.maps.Marker({\n\t\t\t// \tposition: coordinates[0],\n\t\t\t// \tmap: Map,\n\t\t\t// \ttitle:\n\t\t\t// \t\tMath.round(\n\t\t\t// \t\t\tgoogle.maps.geometry.spherical.computeArea(polygon.getPath())\n\t\t\t// \t\t) *\n\t\t\t// \t\t\t10.7639 +\n\t\t\t// \t\t\" Square Feet\"\n\t\t\t// });\n\t\t\t//Create a popup window and then add a click listener to open the popup on click or hover\n\t\t\tvar infowindow = new google.maps.InfoWindow({\n\t\t\t\tcontent:\n\t\t\t\t\t\"SQUARE FEET:<br>\" +\n\t\t\t\t\t(\n\t\t\t\t\t\tgoogle.maps.geometry.spherical.computeArea(polygon.getPath()) *\n\t\t\t\t\t\t10.7639\n\t\t\t\t\t).toFixed() +\n\t\t\t\t\tdimensionsString\n\t\t\t});\n\n\t\t\tmarker.addListener(\"click\", function() {\n\t\t\t\tinfowindow.open(Map, marker);\n\t\t\t});\n\t\t\tpolygon.addListener(\"mouseover\", function() {\n\t\t\t\tconsole.log(\"hovering\");\n\t\t\t\tmarker.setMap(map);\n\t\t\t\tinfowindow.open(Map, marker);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tinfowindow.close();\n\t\t\t\t}, 5000);\n\t\t\t});\n\n\t\t\tinfowindow.open(Map, marker);\n\t\t});\n\n\t\t/*events and listeners and blah blah*/\n\n\t\tdrawingManager.polygonOptions.fillColor = \"#00FF00\";\n\t\tdrawingManager.polygonOptions.fillOpacity = 0.8;\n\n\t\tvar legal = document.getElementById(\"isLegal\");\n\t\tlegal.addEventListener(\"click\", function() {\n\t\t\tconsole.log(\"inside init and islegal is clicked.\");\n\t\t\tdrawingManager.polygonOptions.fillColor = \"#00FF00\";\n\t\t});\n\t\tvar prohibited = document.getElementById(\"isProhibited\");\n\t\tprohibited.addEventListener(\"click\", function() {\n\t\t\tconsole.log(\"inside init and prohibited is clicked.\");\n\t\t\tdrawingManager.polygonOptions.fillColor = \"#ff0000\";\n\t\t});\n\n\t\tvar degreesToRadians = function(degrees) {\n\t\t\treturn (degrees * Math.PI) / 180;\n\t\t};\n\t\tvar distanceInKmBetweenEarthCoordinates = function(lat1, lon1, lat2, lon2) {\n\t\t\tvar earthRadiusKm = 6371;\n\n\t\t\tvar dLat = degreesToRadians(lat2 - lat1);\n\t\t\tvar dLon = degreesToRadians(lon2 - lon1);\n\n\t\t\tlat1 = degreesToRadians(lat1);\n\t\t\tlat2 = degreesToRadians(lat2);\n\n\t\t\tvar a =\n\t\t\t\tMath.sin(dLat / 2) * Math.sin(dLat / 2) +\n\t\t\t\tMath.sin(dLon / 2) *\n\t\t\t\t\tMath.sin(dLon / 2) *\n\t\t\t\t\tMath.cos(lat1) *\n\t\t\t\t\tMath.cos(lat2);\n\t\t\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\t\t\treturn earthRadiusKm * c;\n\t\t};\n\n\t\t//map polygons from server\n\t\tlet cleanedCoordinates = this.props.toBeMappedFromServer.map(pgn => {\n\t\t\tconsole.log(\"pgn\", pgn);\n\t\t\tlet myArray = [];\n\t\t\tpgn.coords.forEach(point => {\n\t\t\t\tconsole.log(point);\n\t\t\t\tmyArray.push({ lat: point[0], lng: point[1] });\n\t\t\t});\n\t\t\tmyArray.push({\n\t\t\t\tlat: pgn.coords[0][0],\n\t\t\t\tlng: pgn.coords[0][1]\n\t\t\t});\n\t\t\tmyArray.push({ legal: pgn.legal });\n\n\t\t\treturn myArray;\n\t\t\t// return {lat: pgn}\n\t\t});\n\t\tconsole.log(\"cleaned Coordinates\", cleanedCoordinates);\n\t\tcleanedCoordinates.forEach(plygon => {\n\t\t\tconsole.log(\"polygon\", plygon);\n\t\t\tlet legal = plygon.pop();\n\t\t\tconsole.log(\"legal is\", legal.legal);\n\n\t\t\tvar mappedPolygon = new google.maps.Polygon({\n\t\t\t\tpath: plygon,\n\t\t\t\tgeodesic: true,\n\t\t\t\tstrokeColor: \"#00ff00\",\n\t\t\t\tfillColor: legal.legal ? \"#00ff00\" : \"#ff0000\",\n\t\t\t\tstrokeOpacity: 1.0,\n\t\t\t\tstrokeWeight: 2\n\t\t\t});\n\t\t\tmappedPolygon.setMap(map);\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>Square Feet</h2>\n\t\t\t\t\t\t<input type=\"text\" id=\"sqfeet\" placeholder=\"value goes here\" />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t</div>\n\t\t\t\t\t<h2>Mark Legal or Prohibited</h2>\n\n\t\t\t\t\t<div id=\"legals\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\tname=\"legal\"\n\t\t\t\t\t\t\tvalue=\"legal\"\n\t\t\t\t\t\t\tid=\"isLegal\"\n\t\t\t\t\t\t\t// onClick={this.clickLegalHandler}\n\t\t\t\t\t\t\tdefaultChecked\n\t\t\t\t\t\t/>{\" \"}\n\t\t\t\t\t\tLegal\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\tname=\"legal\"\n\t\t\t\t\t\t\tvalue=\"prohibited\"\n\t\t\t\t\t\t\tid=\"isProhibited\"\n\t\t\t\t\t\t\t// onClick={this.clickProhibitedHandler}\n\t\t\t\t\t\t/>{\" \"}\n\t\t\t\t\t\tProhibited\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br />\n\t\t\t\t<div id=\"\">\n\t\t\t\t\t<label style={{ color: \"green\", fontSize: \"20pt\" }}>Search Bar</label>\n\t\t\t\t\t<br />\n\t\t\t\t\t<input\n\t\t\t\t\t\tstyle={{ border: \"solid green 6px\" }}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tid=\"searchWindow\"\n\t\t\t\t\t\tplaceholder=\"search for a city\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<Map\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\twidth: \"80%\",\n\t\t\t\t\t\theight: \"80%\",\n\t\t\t\t\t\tmarginLeft: \"10%\",\n\t\t\t\t\t\tborder: \"solid green 8px\"\n\t\t\t\t\t}}\n\t\t\t\t\tgoogle={window.google}\n\t\t\t\t\tonReady={this.initMap}\n\t\t\t\t\tonClick={this.onMapClicked}\n\t\t\t\t\tsendPolygonToServer={this.sendPolygonToServer}\n\t\t\t\t\ttoMapData={this.data}\n\t\t\t\t\tinitialCenter={{ lat: 47.6062, lng: -122.3321 }}\n\t\t\t\t\tzoom={15}\n\t\t\t\t\tscaleControl\n\t\t\t\t\teMapApiInternals>\n\t\t\t\t\t{/* <Marker\n\t\t\t\t\t\ttitle={\"The marker`s title will appear as a tooltip.\"}\n\t\t\t\t\t\tname={\"Downtown\"}\n\t\t\t\t\t\tposition={{ lat: 47.60629, lng: -122.3321 }}\n\t\t\t\t\t/> */}\n\t\t\t\t</Map>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default GoogleApiWrapper({\n\tapiKey: GOOGLE_API_KEY,\n\tlibraries: [\"drawing\", \"places\"]\n})(DrawingMap);\n","const GOOGLE_API_KEY = \"AIzaSyAKWE1JinLb5yLSoxHiEjiq1CMuOqbx_s4\";\nexport default GOOGLE_API_KEY;\n","import React from \"react\";\nimport { geolocated } from \"react-geolocated\";\n\nclass Location extends React.Component {\n\trender() {\n\t\treturn !this.props.isGeolocationAvailable ? (\n\t\t\t<div>Your browser does not support Geolocation</div>\n\t\t) : !this.props.isGeolocationEnabled ? (\n\t\t\t<div>Geolocation is not enabled</div>\n\t\t) : this.props.coords ? (\n\t\t\t<table>\n\t\t\t\t<tbody>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>latitude</td>\n\t\t\t\t\t\t<td>{this.props.coords.latitude}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>longitude</td>\n\t\t\t\t\t\t<td>{this.props.coords.longitude}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>altitude</td>\n\t\t\t\t\t\t<td>{this.props.coords.altitude}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>heading</td>\n\t\t\t\t\t\t<td>{this.props.coords.heading}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>speed</td>\n\t\t\t\t\t\t<td>{this.props.coords.speed}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t) : (\n\t\t\t<div>Getting the location data&hellip; </div>\n\t\t);\n\t}\n}\n\nexport default geolocated({\n\tpositionOptions: {\n\t\tenableHighAccuracy: false\n\t},\n\tuserDecisionTimeout: 5000\n})(Location);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MapPage from \"./Components/mapPage\";\nimport Location from \"./Components/getLocation\";\nimport { geolocated } from \"react-geolocated\";\n\nimport GoogleApiWrapper from \"./Components/mapPage\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.data = [];\n\t\tthis.state = {\n\t\t\ttoBeMappedFromServer: []\n\t\t};\n\t}\n\n\tsendPolygonToServer = async data => {\n\t\tlet servresp = await fetch(\"/gps\", {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t},\n\t\t\tbody: JSON.stringify(data)\n\t\t});\n\t\tconsole.log(\"response\", servresp.data);\n\t};\n\n\tcomponentDidMount() {\n\t\tconsole.log(\"componentDidMount\", this.state);\n\t\tfetch(\"/gps\")\n\t\t\t.then(response => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(data1 => {\n\t\t\t\tconsole.log(\"data\", data1.data);\n\t\t\t\tthis.setState({\n\t\t\t\t\ttoBeMappedFromServer: data1.data\n\t\t\t\t});\n\t\t\t});\n\t\tsetTimeout(() => {\n\t\t\tconsole.log(\"Location available\", geolocated.isGeolocationAvailable);\n\t\t}, 4000);\n\t}\n\t// postGPS('hello')\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>This is the app.js page</h1>\n\t\t\t\t<Location />\n\t\t\t\t<MapPage\n\t\t\t\t\t// onClick={this.postGPS}\n\t\t\t\t\tsendPolygonToServer={this.sendPolygonToServer}\n\t\t\t\t\ttoMapData={this.data}\n\t\t\t\t\ttoBeMappedFromServer={this.state.toBeMappedFromServer}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}